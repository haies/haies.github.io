<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Database Design</title>
    <url>/Database-Design/</url>
    <content><![CDATA[<p>数据库设计通常包括：概念设计、逻辑设计和物理设计。</p>
<h1 id="概念设计"><a href="#概念设计" class="headerlink" title="概念设计"></a>概念设计</h1><p>概念设计是最顶层设计，包括实体、关系和约束。通常用E-R图表示，分局部E-R图和总E-R图，局部E-R图通常表示管理的一个或几个实体之间的关系及属性，总E-R图通常表示全部实体之间的关系，若实体较多忽略实体属性。若存在几个不相关的实体集，可分开表示，通常该处不表示数据字典。</p>
<p><img src="/images/markdown-img-paste-20180926110442672.png" alt="概念设计图"></p>
<h1 id="逻辑设计"><a href="#逻辑设计" class="headerlink" title="逻辑设计"></a>逻辑设计</h1><p>逻辑设计是概念设计的实施，表示与数据库类型无关的数据结构、数据类型、约束等相关描述。通常选择关系型数据模型，形式为二维表。</p>
<p><img src="/images/markdown-img-paste-2018092611072013.png" alt="逻辑设计图"></p>
<h1 id="物理设计"><a href="#物理设计" class="headerlink" title="物理设计"></a>物理设计</h1><p>物理设计是与选择数据库类型相关的具体实施，包括创建表结构、索引和约束等，形式为DDL描述的sql脚本。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE Customer (</span><br><span class="line">  CustNo     NUMBER NOT NULL,</span><br><span class="line">  CustName VARCHAR2(200) NOT NULL,</span><br><span class="line">  Street       VARCHAR2(200) NOT NULL,</span><br><span class="line">  City          VARCHAR2(200) NOT NULL,</span><br><span class="line">  State        CHAR(2) NOT NULL,</span><br><span class="line">  Zip           VARCHAR2(20) NOT NULL,</span><br><span class="line">  PRIMARY KEY (CustNo)</span><br><span class="line">  ) ;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot+Mybatis+Maven</title>
    <url>/Springboot-Mybatis-Maven/</url>
    <content><![CDATA[<blockquote>
<p>本次项目采用Springboot+Mybatis方式，使用注解式配置，增加全局异常处理，实现前端和后台参数传递过程下划线和驼峰法的自动转换。<a href="http://www.mybatis.org/generator/running/running.html" target="_blank" rel="noopener">MyBatis</a>官方没有提供基于Gradle的MyBtis Generator插件，因此沿用Maven做Build工具。</p>
</blockquote>
<hr>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="application-yml关键配置"><a href="#application-yml关键配置" class="headerlink" title="application.yml关键配置"></a>application.yml关键配置</h2><p>MyBatis配置如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">"classpath:mapper/*.xml"</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">"com.zjchey.dataManage.entity"</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>map-underscore-to-camel-case: true</code>在生产代码时将数据库中下划线命名自动转为驼峰法命名代码。</p>
</blockquote>
<p>Jackson配置如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jackson:</span></span><br><span class="line">  <span class="attr">property-naming-strategy:</span> <span class="string">SNAKE_CASE</span></span><br><span class="line">  <span class="attr">defaultPropertyInclusion:</span> <span class="string">NON_EMPTY</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>property-naming-strategy: SNAKE_CASE</code>用于前端以application/json方式提交的POST请求的流参数转换，实现前端和后台双向自动下划线和驼峰法命名，后端接受参数的对象需要用@RequestBody修饰。<br><code>defaultPropertyInclusion: NON_EMPTY</code>用于@ResponseBody修饰的接口在将对象转为json返回参数时，如果对象属性为null，则在json中忽略该属性。</p>
</blockquote>
<h2 id="注解配置"><a href="#注解配置" class="headerlink" title="注解配置"></a>注解配置</h2><ol>
<li>使用<code>@Configuration</code>修饰配置的类。</li>
<li>使用<code>@Bean</code>修饰的方法相当于xml配置中的bean标签，对应方法名为xml配置中的id属性，也可在用<code>@Bean(name = &quot;heou.net&quot;)</code>的形式指定id。</li>
<li>Spring的<a href="https://www.jianshu.com/p/a953afa0165d" target="_blank" rel="noopener">三种装配方式</a>分别是:基于<code>@Component</code>和<code>@Autowired</code>的隐式装配、基于<code>@Configuration</code>的Java显示装配和基于<code>xml</code>配置的显式装配。</li>
<li>在xml配置中，可通过构造器注入、setter注入的方式装配Bean。</li>
<li>在运行函数的类的配置如下：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(scanBasePackages = <span class="string">"com.*.*"</span>)</span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.*.*.*"</span>)</span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br></pre></td></tr></table></figure>
@SpringBootApplication 包括@Configuration、@EnableAutoConfiguration和@ComponentScan三个注解。</li>
</ol>
<h2 id="排除tomcat使用undertow"><a href="#排除tomcat使用undertow" class="headerlink" title="排除tomcat使用undertow"></a>排除tomcat使用undertow</h2><p>Maven:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;exclusion&gt;</span><br><span class="line">    &lt;&#x2F;exclusions&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p>Gradle:</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">configurations</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span>.<span class="keyword">exclude</span> module: <span class="string">'spring-boot-starter-tomcat'</span></span><br><span class="line">&#125;</span><br><span class="line">或</span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-web'</span>)&#123;</span><br><span class="line">       <span class="keyword">exclude</span> module: <span class="string">'spring-boot-starter-tomcat'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="logback日志"><a href="#logback日志" class="headerlink" title="logback日志"></a>logback日志</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">file:</span> <span class="string">projectname.log</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">.</span></span><br><span class="line">  <span class="attr">pattern:</span> <span class="string">"%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n"</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">   <span class="attr">root:</span> <span class="string">info</span></span><br><span class="line">   <span class="attr">org.springframework.web:</span> <span class="string">warn</span></span><br></pre></td></tr></table></figure>
<p>可指定类的日志输出级别。</p>
<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="MyBatis分页"><a href="#MyBatis分页" class="headerlink" title="MyBatis分页"></a>MyBatis分页</h2><h3 id="内存分页"><a href="#内存分页" class="headerlink" title="内存分页"></a>内存分页</h3><p>使用RowBounds</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">loggerMapper.getLogsBySortASC(<span class="keyword">new</span> RowBounds(<span class="number">0</span>,<span class="number">10</span>));</span><br></pre></td></tr></table></figure>
<h3 id="Mybatis拦截器"><a href="#Mybatis拦截器" class="headerlink" title="Mybatis拦截器"></a>Mybatis拦截器</h3><p>待实现</p>
<h3 id="第三方组件"><a href="#第三方组件" class="headerlink" title="第三方组件"></a>第三方组件</h3><p><a href="https://github.com/pagehelper/Mybatis-PageHelper" target="_blank" rel="noopener">PageHelper</a></p>
<h2 id="通用mapper"><a href="#通用mapper" class="headerlink" title="通用mapper"></a>通用mapper</h2><p>通过泛型实现所有的mapper的CRUD操作，减少代码量。待实现，目前有<a href="https://github.com/abel533/Mapper" target="_blank" rel="noopener">通用Mapper4</a></p>
<h2 id="MyBatis-Generator"><a href="#MyBatis-Generator" class="headerlink" title="MyBatis Generator"></a>MyBatis Generator</h2><h3 id="POM配置"><a href="#POM配置" class="headerlink" title="POM配置"></a>POM配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.postgresql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>postgresql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>42.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="generatorConfig配置"><a href="#generatorConfig配置" class="headerlink" title="generatorConfig配置"></a>generatorConfig配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"context"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"user"</span> <span class="attr">domainObjectName</span>=<span class="string">"UserSample"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">enableSelectByPrimaryKey</span>=<span class="string">"false"</span> <span class="attr">enableUpdateByPrimaryKey</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">enableDeleteByPrimaryKey</span>=<span class="string">"false"</span> <span class="attr">delimitIdentifiers</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>targetRuntime=”MyBatis3”生产的代码包括selectByExample，delimitIdentifiers=”true”确保表名加引号，即使使用关键字（例如user）也可以正常查询。</p>
<h1 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h1><h2 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger=LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Result</span> <span class="title">handlerGlobalException</span>(<span class="title">Exception</span> <span class="title">ex</span>)</span>&#123;</span><br><span class="line">        logger.error(ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(ex.getMessage(),ResultType.ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若业务代码中无异常处理，可捕获controller和service中的异常。</p>
<h2 id="统一返回消息格式"><a href="#统一返回消息格式" class="headerlink" title="统一返回消息格式"></a>统一返回消息格式</h2><p>1.定义错误代码与错误消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ResultType &#123;</span><br><span class="line">    SUCCESS(<span class="number">200</span>,<span class="string">"接口返回正常"</span>),</span><br><span class="line">    FAILURE(<span class="number">5000</span>,<span class="string">"接口返回失败"</span>),</span><br><span class="line">    PARAMS_ERROR(<span class="number">5100</span>,<span class="string">"提交参数错误"</span>),</span><br><span class="line">    PARAMS_ERROR_MISS(<span class="number">5101</span>,<span class="string">"必填参数缺失"</span>),</span><br><span class="line">    PARAMS_ERROR_INVALID(<span class="number">5102</span>,<span class="string">"参数无效"</span>),</span><br><span class="line">    PERMISSION_DENIED(<span class="number">6000</span>,<span class="string">"权限拒绝"</span>),</span><br><span class="line">    DENIED_NOT_ROLE(<span class="number">6100</span>,<span class="string">"角色权限拒绝"</span>),</span><br><span class="line">    DENIED_NOT_ADMIN(<span class="number">6101</span>,<span class="string">"非管理员权限"</span>),</span><br><span class="line">    DENIED_NOT_USER(<span class="number">6102</span>,<span class="string">"用户权限拒绝"</span>),</span><br><span class="line">    ERROR(<span class="number">500</span>,<span class="string">"接口调用错误"</span>),</span><br><span class="line">    CUSTOM(<span class="number">999</span>,<span class="string">"定制消息"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    ResultType(Integer code, String msg)&#123;</span><br><span class="line">        <span class="keyword">this</span>.code=code;</span><br><span class="line">        <span class="keyword">this</span>.msg=msg;</span><br><span class="line">    &#125;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>定义返回格式</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> ResultType resultType;</span><br><span class="line">    <span class="comment">/*错误码*/</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">/*提示信息 */</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="comment">/*数据内容*/</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Result</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.setResultType(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Result</span><span class="params">(T data, ResultType resultType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.setResultType(resultType);</span><br><span class="line">    &#125;</span><br><span class="line">......</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setResultType</span><span class="params">(ResultType type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resultType=type==<span class="keyword">null</span>? ResultType.SUCCESS:type;</span><br><span class="line">        <span class="keyword">this</span>.code= <span class="keyword">this</span>.resultType.getCode();</span><br><span class="line">        <span class="keyword">this</span>.msg= <span class="keyword">this</span>.resultType.getMsg();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>定义BaseController。</li>
</ol>
<h1 id="工具类使用"><a href="#工具类使用" class="headerlink" title="工具类使用"></a>工具类使用</h1><h2 id="Google-Guava"><a href="#Google-Guava" class="headerlink" title="Google Guava"></a>Google Guava</h2><h2 id="apache-commons-collections"><a href="#apache-commons-collections" class="headerlink" title="apache-commons-collections"></a>apache-commons-collections</h2><h2 id="apache-commons-fileupload"><a href="#apache-commons-fileupload" class="headerlink" title="apache-commons-fileupload"></a>apache-commons-fileupload</h2><h1 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h1><h2 id="数据库读写分离"><a href="#数据库读写分离" class="headerlink" title="数据库读写分离"></a>数据库读写分离</h2><h2 id="redis二级缓存"><a href="#redis二级缓存" class="headerlink" title="redis二级缓存"></a>redis二级缓存</h2><h2 id="统一前后端地址"><a href="#统一前后端地址" class="headerlink" title="统一前后端地址"></a>统一前后端地址</h2><p>使用反向代理</p>
<h2 id="处理枚举"><a href="#处理枚举" class="headerlink" title="处理枚举"></a>处理枚举</h2><h2 id="前后端字段下划线和驼峰法自动切换"><a href="#前后端字段下划线和驼峰法自动切换" class="headerlink" title="前后端字段下划线和驼峰法自动切换"></a>前后端字段下划线和驼峰法自动切换</h2><blockquote>
<p>指定property-naming-strategy: SNAKE_CASE<br>可实现后台到前端时的lowwer_camel转under_score但是，前端到后台时，后台接受参数的对象前加@RequestBody后，以Content-Type: application/json方式发POST请求时可以实现under_score转lowwer_camel<br>以application/x-www-form-urlencoded发POST请求时可以实现和Get请求均不能实现。</p>
</blockquote>
<p>1.通过get请求或者application/x-www-form-urlencoded提交的POST请求</p>
<blockquote>
<p>此情况下，参数可通过httpserveletRequest.getParams()获取</p>
</blockquote>
<p>定义argumentreslover,如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnderScore2CamelArgumentResolver</span> <span class="keyword">implements</span> <span class="title">HandlerMethodArgumentResolver</span></span>&#123;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.通过application/json提交的POST请求</p>
<blockquote>
<p>此情况下，参数可通过httpserveletRequest.getInputStream()获取参数json流。</p>
</blockquote>
<p>参考本文的Jackson配置</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="Generator的xml文件如何读取application-yml内的内容"><a href="#Generator的xml文件如何读取application-yml内的内容" class="headerlink" title="Generator的xml文件如何读取application.yml内的内容"></a>Generator的xml文件如何读取application.yml内的内容</h2><p>未解</p>
<h2 id="yml中的日志名称改为项目名称"><a href="#yml中的日志名称改为项目名称" class="headerlink" title="yml中的日志名称改为项目名称"></a>yml中的日志名称改为项目名称</h2><p>未解</p>
<h2 id="Invalid-bound-statement-not-found"><a href="#Invalid-bound-statement-not-found" class="headerlink" title="Invalid bound statement (not found)"></a>Invalid bound statement (not found)</h2><p>异常的全称如下：</p>
<blockquote>
<p>org.apache.ibatis.binding.BindingException: Invalid bound statement (not found):</p>
</blockquote>
<p>网上大多提到的是xml的mapper无法扫描到，要在启动类配置@MapperScan(“com.*“)，但本项目一开始犯了各低级的错误，application.xml的datasource.url配置成了jdbc:postgres://***，应该是jdbc:postgresql://***</p>
]]></content>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>开发技术体系</title>
    <url>/dev/</url>
    <content><![CDATA[<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ol>
<li><p>开发工具 <a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener">VSCode</a>，开发所需插件：</p>
<ul>
<li><code>rest-client</code></li>
<li><code>githistory</code></li>
<li><code>gitlens</code></li>
<li><code>vscode-css-peek</code></li>
<li><code>vscode-eslint</code></li>
<li><code>vscode-file-peek</code></li>
<li><code>vetur</code></li>
<li><code>vue-beautify</code></li>
<li><code>vue-peek</code></li>
<li><code>vue-snippets</code></li>
</ul>
</li>
<li><p>前端框架 <a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">VueJS</a>2.x，主要包括：</p>
<table>
<thead>
<tr>
<th>技术</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Vue</td>
<td>前端框架核心</td>
</tr>
<tr>
<td>Vue-router</td>
<td>路由</td>
</tr>
<tr>
<td>Vuex</td>
<td>全局状态管理</td>
</tr>
<tr>
<td>Axios</td>
<td>前端HTTP</td>
</tr>
<tr>
<td>v-charts</td>
<td>基于Echarts的图表</td>
</tr>
<tr>
<td>Js-cookie</td>
<td>cookie管理工具</td>
</tr>
<tr>
<td>nprogress</td>
<td>进度条控件</td>
</tr>
<tr>
<td><a href="https://element.eleme.cn/#/zh-CN/component/installation" target="_blank" rel="noopener">ElementUI</a></td>
<td>组件库</td>
</tr>
</tbody></table>
</li>
<li><p>代码打包工具 WebPack</p>
</li>
<li><p>EcmaScript 2015</p>
<blockquote>
<p>简称ES6，ES2015。是是JavaScript语言的下一代标准。<a href="https://blog.csdn.net/zhouziyu2011/article/details/69569604" target="_blank" rel="noopener">ECMAScript是JavaScript的规格，JavaScript是ECMAScript的一种实现</a>。主流浏览器基本都兼容ES2015，通常开发环境用ES2015，借助<a href="https://babeljs.io/" target="_blank" rel="noopener">Babel</a>将ES2015编译成ES5部署在生产环境。<br>ES2105有很多新特性：<a href="https://segmentfault.com/a/1190000004365693" target="_blank" rel="noopener">let, const, class, extends, super, arrow functions, template string, destructuring, default, rest arguments</a>。</p>
</blockquote>
</li>
<li><p>前端地图</p>
<ul>
<li><a href="http://openlayers.org/" target="_blank" rel="noopener">Openlayer</a>，目前最新为5.2.0，地图操作有比较全面，目前openlayer整合三维前端框架<a href="http://openlayers.org/ol-cesium/" target="_blank" rel="noopener">ol-cesium</a>。目前有适用于Vue的<a href="https://vuelayers.github.io/#/?id=vuelayers" target="_blank" rel="noopener">Vuelayers</a>。</li>
<li><a href="https://leafletjs.com/" target="_blank" rel="noopener">Leaflet</a>，目前最新为1.3.4，轻量级，适合用于移动端。</li>
</ul>
</li>
</ol>
<h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ol>
<li><p>开发工具 <a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">IntelliJ IDEA</a></p>
</li>
<li><p>构建工具 Maven</p>
</li>
<li><p>后端框架 SpringBoot</p>
</li>
<li><p>ORM框架 MyBatis</p>
</li>
<li><p>日志 SL4J+logback</p>
</li>
<li><p>缓存 Redis</p>
</li>
<li><p>全文搜索 ElasticSearch</p>
</li>
<li><p>权限控制 Shiro</p>
</li>
<li><p>数据库 Postgres + PostGIS</p>
</li>
</ol>
<h2 id="地图服务"><a href="#地图服务" class="headerlink" title="地图服务"></a>地图服务</h2><p><a href="http://geoserver.org/download/" target="_blank" rel="noopener">Geoserver</a>动态读取postgres的地理空间数据，发布切片格式如下</p>
<ul>
<li>矢量切片<ul>
<li>application/json;type=geojson，无压缩，不适合大量切片</li>
<li>application/vnd.mapbox-vector-tile，有压缩，适合海量切片</li>
</ul>
</li>
<li>栅格切片（小比例尺下切片不易成功）<ul>
<li>image/jpeg</li>
<li>image/png</li>
</ul>
</li>
</ul>
<h2 id="系统部署"><a href="#系统部署" class="headerlink" title="系统部署"></a>系统部署</h2><ul>
<li>Docker  <ul>
<li>Docker Swarm 生产环境部署</li>
<li>docker-compose 开发测试</li>
</ul>
</li>
<li>Nginx<ul>
<li>反向代理，包括4层代理和7层代理</li>
</ul>
</li>
</ul>
<h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><ul>
<li>Git</li>
<li>代码管理 Gogs，<a href="http://10.66.13.159/git/" target="_blank" rel="noopener">代码管理地址</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>docker</title>
    <url>/docker/</url>
    <content><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ul>
<li><code>docker-compose -f qsh-compose.yml -p qsh up -d</code></li>
<li><code>docker-compose -f qsh-compose.yml -p qsh down</code></li>
<li><code>docker exec id /bin/bash|sh</code></li>
<li><code>docker logs id</code></li>
<li><code>ls -lh $(find /var/lib/docker/containers/ -name *-json.log)</code></li>
<li><code>docker inspect yj_tomcat|grep json.log</code></li>
<li><code>dockerd</code></li>
</ul>
<h1 id="日志设置"><a href="#日志设置" class="headerlink" title="日志设置"></a>日志设置</h1><p>位置<code>/etc/docker/deamon.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"log-driver"</span>: <span class="string">"json-file"</span>,</span><br><span class="line">  <span class="attr">"log-opts"</span>: &#123;</span><br><span class="line">    <span class="attr">"max-size"</span>: <span class="string">"1m"</span>,</span><br><span class="line">    <span class="attr">"max-file"</span>: <span class="string">"5"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>service docker restart</code></p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul>
<li>compose文件若引用dockerfile，dockerfile内有相对路径引用的外部文件，则相对路径以compose文件为基础。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>epsg</title>
    <url>/epsg/</url>
    <content><![CDATA[<h1 id="常用坐标对应的EPSG编号"><a href="#常用坐标对应的EPSG编号" class="headerlink" title="常用坐标对应的EPSG编号"></a>常用坐标对应的EPSG编号</h1><p>cgcs2000_geo: <strong>4490</strong><br>cgcs2000_3_gk_117E: <strong>4548</strong><br>cgcs2000_3_gk_120E: <strong>4549</strong><br>cgcs2000_3_gk_123E: <strong>4550</strong><br>wgs84_geo: <strong>4326</strong><br>web_mercator_auxiliary_sphere: <strong>3875</strong><br>web_mercator(google): <strong>3785</strong></p>
]]></content>
  </entry>
  <entry>
    <title>Excel</title>
    <url>/excel/</url>
    <content><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="Vlookup"><a href="#Vlookup" class="headerlink" title="Vlookup"></a>Vlookup</h2><p>第一个参数可以包含通配符 <code>*</code>，进行查询。</p>
<blockquote>
<p>=VLOOKUP(“*“&amp;B1&amp;”*“,A1:A7,1,)代表的含义是在A1:A7的范围内查找包含B1关键字的单元格，找到后返回A1:A7第一列的内容。函数中的“*”代表任意字符，也就是说在A1:A7内查找B1文本前后任意字符的内容，也就是包含B1文本的意思。其中的1代表返回A1:A7数据区域第一列结果，最后一个逗号后省略参数代表的是精确匹配，也可以输入0或FALSE。</p>
</blockquote>
<h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><h2 id="函数计算方式"><a href="#函数计算方式" class="headerlink" title="函数计算方式"></a>函数计算方式</h2><ul>
<li>向量：B2:B6 表示向量。</li>
<li>数组计算：在公式最外有 <code>{}</code>，快捷键为 <code>ctrl+shift+enter</code>。</li>
</ul>
<h2 id="数组作为公式参数"><a href="#数组作为公式参数" class="headerlink" title="数组作为公式参数"></a>数组作为公式参数</h2><blockquote>
<p>=FIND({“杭州”;”湖州”;”嘉兴 “},B1)，返回结果也是数组，因此显示为#VALUE!</p>
</blockquote>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul>
<li>绝对引用切换：选中范围按 <code>F4</code></li>
<li>显示公式内容：在单元格上按 <code>F2</code></li>
<li>单元格转数组：选中多个单元格按 <code>F9</code></li>
<li>公式求值：选中公式按 <code>F9</code></li>
<li>多个单元格填充：选中多个单元格按 <code>ctrl+enter</code></li>
<li>单元格定位：<code>F5</code></li>
<li>快速填充：<code>Ctrl+E</code></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>This in Deep Object with ES2015</title>
    <url>/This-in-Deep-Object-with-ES2015/</url>
    <content><![CDATA[<p>在封装地图前端API时，一开始在多层次深对象中无法获取类的实例变量，一开始用prototype上的一个属性代替，但是无法满足多个地图实例启动的要求，因为prototype属性是共享的。以下有三种解决方法。</p>
<h1 id="1-在运行时绑定"><a href="#1-在运行时绑定" class="headerlink" title="1. 在运行时绑定"></a>1. 在运行时绑定</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubRun</span>(<span class="params">input</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._input=input;</span><br><span class="line">&#125;</span><br><span class="line">SubRun.prototype.funs=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> self=<span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    show:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">// console.log(this._input);</span></span><br><span class="line">      <span class="built_in">console</span>.log(self._input);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> subRun=<span class="keyword">new</span> SubRun(<span class="string">"sub_run_example"</span>);</span><br><span class="line">subRun.funs().show();</span><br></pre></td></tr></table></figure>
<p>通过闭包返回一个函数可获取运行时指向实例的this，但是方法调用时多了一个括号，稍显麻烦。</p>
<h1 id="2-使用Apply"><a href="#2-使用Apply" class="headerlink" title="2. 使用Apply"></a>2. 使用Apply</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubApply</span>(<span class="params">input</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._input=input;</span><br><span class="line">  SuperApply.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperApply</span>(<span class="params">input</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> self=<span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">this</span>._input=input;</span><br><span class="line">  <span class="keyword">this</span>.base= &#123;</span><br><span class="line">    show:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"from param: "</span>+input);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"from self: "</span>+self._input);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">this</span>.funs=&#123;</span><br><span class="line">    show:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"from funs:"</span>);</span><br><span class="line">      self.base.show();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> subApply=<span class="keyword">new</span> SubApply(<span class="string">"sub_apply_example"</span>);</span><br><span class="line">subApply.base.show();</span><br><span class="line">subApply.funs.show();</span><br></pre></td></tr></table></figure>
<p>改方法可解决this对象获取的问题，但是定义多个proto属性需重复写，不优雅。</p>
<h1 id="3-使用Classs"><a href="#3-使用Classs" class="headerlink" title="3. 使用Classs"></a>3. 使用Classs</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(input)&#123;</span><br><span class="line">    <span class="keyword">this</span>._input=input;</span><br><span class="line">    <span class="keyword">const</span> self=<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>.base= &#123;</span><br><span class="line">      <span class="comment">//使用lambda的方式获取this</span></span><br><span class="line">      show:<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"from param: "</span>+input);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"from self: "</span>+<span class="keyword">this</span>._input);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.funs=&#123;</span><br><span class="line">      show:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"from funs lambda:"</span>);</span><br><span class="line">        self.base.show();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> self()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> protoPropterty()&#123;</span><br><span class="line">    <span class="comment">// const self=this;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      property:<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.protoMethod();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>._input);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  protoMethod()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"from proto :"</span>+<span class="keyword">this</span>._input);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(input)&#123;</span><br><span class="line">    <span class="keyword">super</span>(input);</span><br><span class="line">    <span class="keyword">this</span>._input=input;</span><br><span class="line">    <span class="keyword">this</span>.ori=&#123;</span><br><span class="line">      display:<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"from sub call"</span>);</span><br><span class="line">        <span class="keyword">this</span>.funs.show();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subClass=<span class="keyword">new</span> SubClass(<span class="string">"sub_class_example"</span>);</span><br><span class="line"><span class="keyword">let</span> subClass2=<span class="keyword">new</span> SubClass(<span class="string">"sub_class_example2"</span>);</span><br><span class="line"><span class="comment">// subClass.base.show();</span></span><br><span class="line"><span class="comment">// subClass.funs.show();</span></span><br><span class="line">subClass.protoPropterty.property();</span><br><span class="line"><span class="comment">// subClass2.protoPropterty.property();</span></span><br><span class="line"><span class="comment">// subClass.protoMethod();</span></span><br><span class="line"><span class="comment">// subClass.ori.display();</span></span><br></pre></td></tr></table></figure>
<p>若有多个原型属性，用<code>const self=this</code>的方法稍显繁琐，利用lambda的特性可在多层次深对象中直接获取指向实例的this。</p>
]]></content>
  </entry>
  <entry>
    <title>Frontend</title>
    <url>/frontend/</url>
    <content><![CDATA[<h1 id="EcmaScript-2015"><a href="#EcmaScript-2015" class="headerlink" title="EcmaScript 2015"></a>EcmaScript 2015</h1><blockquote>
<p>简称ES6，ES2015。是是JavaScript语言的下一代标准。<a href="https://blog.csdn.net/zhouziyu2011/article/details/69569604" target="_blank" rel="noopener">ECMAScript是JavaScript的规格，JavaScript是ECMAScript的一种实现</a>。主流浏览器基本都兼容ES2015，通常开发环境用ES2015，借助<a href="https://babeljs.io/" target="_blank" rel="noopener">Babel</a>将ES2015编译成ES5部署在生产环境。<br>ES2105有很多新特性：<a href="https://segmentfault.com/a/1190000004365693" target="_blank" rel="noopener">let, const, class, extends, super, arrow functions, template string, destructuring, default, rest arguments</a>。</p>
</blockquote>
<h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><blockquote>
<p>The <strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noopener">destructuring assignment</a></strong> syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组解构赋值</span></span><br><span class="line"><span class="keyword">let</span> [a, ...b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// [2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象解构赋值</span></span><br><span class="line"><span class="keyword">let</span> o=&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="string">'b1'</span>,<span class="attr">c</span>:&#123;<span class="attr">ci</span>:<span class="string">'cii'</span>&#125;&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;a1,c&#125;=o</span><br><span class="line"><span class="built_in">console</span>.log(a1);<span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(c);<span class="comment">//&#123; ci: 'cii' &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="import-函数"><a href="#import-函数" class="headerlink" title="import()函数"></a>import()函数</h2><blockquote>
<p>import函数的参数specifier，指定所要加载的模块的位置。import命令能够接受什么参数，import()函数就能接受什么参数，两者区别主要是后者为动态加载。<br>import()类似于 Node 的require方法，区别主要是前者是异步加载，后者是同步加载。<br>ES6 import()返回一个 Promise 对象。</p>
</blockquote>
<h2 id="简洁对象定义"><a href="#简洁对象定义" class="headerlink" title="简洁对象定义"></a>简洁对象定义</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简洁对象定义</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">'foo'</span>, b = <span class="number">42</span>, c = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> o = &#123;a, b, c&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(o);<span class="comment">//&#123; a: 'foo', b: 42, c: &#123;&#125; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//简洁函数定义</span></span><br><span class="line"><span class="keyword">let</span> f=&#123;</span><br><span class="line">  fun1()&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(f);<span class="comment">//&#123; fun1: [Function: fun1] &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="对象属性动态定义"><a href="#对象属性动态定义" class="headerlink" title="对象属性动态定义"></a>对象属性动态定义</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> lable=<span class="string">'lable1'</span></span><br><span class="line"><span class="keyword">let</span> od=&#123;</span><br><span class="line">  [lable]:<span class="number">6378</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(od);<span class="comment">//&#123; lable1: 6378 &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><blockquote>
<p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" target="_blank" rel="noopener">Spread syntax</a></strong> allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected. rest 参数的逆运算。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> to=&#123;<span class="string">'a'</span>:<span class="string">'av'</span>,<span class="string">'b'</span>:<span class="string">'bv'</span>&#125;</span><br><span class="line"><span class="keyword">let</span> ta=[<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>]</span><br><span class="line"><span class="built_in">console</span>.log([...ta,<span class="string">'4'</span>]);<span class="comment">//[ '1', '2', '3', '4' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;...to,<span class="string">'c'</span>:<span class="string">'cv'</span>);<span class="comment">//es2018 下&#123;'a':'av','b':'bv','c':'cv'&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="地图前端现状"><a href="#地图前端现状" class="headerlink" title="地图前端现状"></a>地图前端现状</h1><h2 id="Openlayers"><a href="#Openlayers" class="headerlink" title="Openlayers"></a>Openlayers</h2><p><a href="http://openlayers.org/" target="_blank" rel="noopener">Openlayer</a>目前最新为5.2.0，地图操作有比较全面，目前openlayer整合三维前端框架<a href="http://openlayers.org/ol-cesium/" target="_blank" rel="noopener">ol-cesium</a>。目前有适用于Vue的<a href="https://vuelayers.github.io/#/?id=vuelayers" target="_blank" rel="noopener">Vuelayers</a>。</p>
<h2 id="Leaflet"><a href="#Leaflet" class="headerlink" title="Leaflet"></a>Leaflet</h2><p><a href="https://leafletjs.com/" target="_blank" rel="noopener">Leaflet</a>目前最新为1.3.4，轻量级，适合用于移动端。</p>
<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><p>静态路由若无redirect选项，刷新后，路由末尾后会自动加斜线，导致后退前进失败，例如</p>
<blockquote>
<p><code>/resource/show</code>会变为<code>/resource/show/</code></p>
</blockquote>
<p>通过addRoutes的动态路由无此问题</p>
<h2 id="vue-x"><a href="#vue-x" class="headerlink" title="vue-x"></a>vue-x</h2><ul>
<li>state：保存数据</li>
<li>getters：进行类似map操作，store的computed属性。</li>
<li>mutations：commit，改变state数据，同步。</li>
<li>actions：dispatch，业务代码，调用多个mutations，异步。</li>
</ul>
<h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><h2 id="linqjs"><a href="#linqjs" class="headerlink" title="linqjs"></a>linqjs</h2><h2 id="font-awesome"><a href="#font-awesome" class="headerlink" title="font-awesome"></a>font-awesome</h2><h2 id="echarts"><a href="#echarts" class="headerlink" title="echarts"></a>echarts</h2><h2 id="rx"><a href="#rx" class="headerlink" title="rx"></a>rx</h2><h2 id="lodash"><a href="#lodash" class="headerlink" title="lodash"></a>lodash</h2><h2 id="moment"><a href="#moment" class="headerlink" title="moment"></a>moment</h2><h1 id="IDEA-配置"><a href="#IDEA-配置" class="headerlink" title="IDEA 配置"></a>IDEA 配置</h1><h2 id="语法高亮"><a href="#语法高亮" class="headerlink" title="语法高亮"></a>语法高亮</h2><ol>
<li>支持Vue语法高亮：安装vuejs插件</li>
<li>HTML标签高亮与自动补全：File | Settings | Editor | FileTypes | HTML 添加 <strong>*.vue</strong></li>
</ol>
<h2 id="添加模板"><a href="#添加模板" class="headerlink" title="添加模板"></a>添加模板</h2><p>File | Settings | Editor | File and Code Templates 添加下面为Vue创建模板：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">"html"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;&#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="SCSS语法提示错误"><a href="#SCSS语法提示错误" class="headerlink" title="SCSS语法提示错误"></a>SCSS语法提示错误</h2><ol>
<li>在IDEA中，style标签中添加 <code>type=&quot;text/scss&quot;</code> 属性</li>
<li>在VS Code其他等，style标签中添加 <code>rel=&quot;stylesheet/scss&quot;</code> 属性<br>为支持两者，标签如下：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">rel</span>=<span class="string">"stylesheet/scss"</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">type</span>=<span class="string">"text/scss"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Webpack-alias支持"><a href="#Webpack-alias支持" class="headerlink" title="Webpack alias支持"></a>Webpack alias支持</h2><p>一般前端开发为适应多种场景，工程根目录不存在webpack.config.json，因此要在<br>File | Settings | Languages &amp; Frameworks | JavaScript | Webpack<br>指定实际的webpack配置文件。</p>
<blockquote>
<p>一般不设置<code>webpack.dev.conf.js</code>，设置<code>webpack.base.conf.js</code>，如果仍然显示<code>Module is not installed</code>，重启IDEA即可。</p>
</blockquote>
<h1 id="前端问题"><a href="#前端问题" class="headerlink" title="前端问题"></a>前端问题</h1><h2 id="空子div的高度完全填充父div剩余部分"><a href="#空子div的高度完全填充父div剩余部分" class="headerlink" title="空子div的高度完全填充父div剩余部分"></a>空子div的高度完全填充父div剩余部分</h2><p>html结构为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"nav"</span>&gt;</span>nav<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span>content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>css为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*方法1*/</span></span><br><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#999</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#nav</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#85d989</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#cc85d9</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*方法2（省略与上相同部分）*/</span></span><br><span class="line"><span class="selector-id">#content</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#cc85d9</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100vh</span> -   <span class="number">50px</span>);<span class="comment">/*该方法的减号前后必须要有空格*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*方法3（省略与上相同部分）*/</span></span><br><span class="line"><span class="selector-id">#nav</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#85d989</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#cc85d9</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA</title>
    <url>/idea/</url>
    <content><![CDATA[<h4 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h4><ol>
<li>查找对象方法实现类：Ctrl+ Shift+ H</li>
<li>查看类继承关系：Ctrl + H</li>
</ol>
<h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><ol>
<li>Settings–&gt;Editor–&gt;Code Style–&gt;Line Seperator(Unix)</li>
<li>Settings–&gt;Editor–&gt;File Encoding–&gt;Properties Files(UTF-8)</li>
</ol>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/git/</url>
    <content><![CDATA[<h2 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h2><blockquote>
<p><strong>ssh-keygen -t rsa -C “<a href="mailto:username@email.com">username@email.com</a>”</strong></p>
</blockquote>
<h2 id="添加本地仓库到github"><a href="#添加本地仓库到github" class="headerlink" title="添加本地仓库到github"></a>添加本地仓库到github</h2><ol>
<li>git init</li>
<li>git remote add origin <a href="mailto:git@github.com">git@github.com</a>:bxxfighting/NowToDo.git</li>
<li>git branch -u origin/master</li>
<li>git pull</li>
</ol>
<h2 id="创建git使用步骤"><a href="#创建git使用步骤" class="headerlink" title="创建git使用步骤"></a>创建git使用步骤</h2><ol>
<li>生成ssh key： git bash下运行 <strong>ssh-keygen -t rsa -C”username”</strong>,然后三个回车，密码为空，上传用户文件夹下的公钥 <strong>id_rsa.pub</strong> 到服务器</li>
<li>配置全局用户名 <strong>git config –global user.name “hai”</strong>、email <strong>git config –global user.email “<a href="mailto:username@email.com">username@email.com</a>“</strong></li>
<li>配置cr、crlf转换 <strong>git config –global core.autocrlf input</strong></li>
<li>配置safecrlf转换 <strong>git config –global core.safecrlf true</strong></li>
<li>下载代码 <strong>git clone <a href="mailto:git@l.zjchey.com">git@l.zjchey.com</a>:code/NjqWeb.git</strong></li>
<li>创建并切换分支 <strong>git checkout -b dev</strong></li>
<li>建立当前本地分支dev和远程dev分支track <strong>git branch -u origin/dev</strong></li>
<li>获取代码 <strong>git pull</strong>（相当向下箭头），提交代码 <strong>git add. git commit -m “message” git push</strong>（相当在vcs右键 commit changes）</li>
</ol>
<h2 id="git分支"><a href="#git分支" class="headerlink" title="git分支"></a>git分支</h2><ol>
<li>创建分支 <strong>git branch &lt; branch_name &gt;</strong>,切换分支 <strong>git checkout &lt; branch_name &gt;</strong>,创建并切换分支 <strong>git checkout -b &lt; branch_name &gt;</strong></li>
<li>显示本地分支 <strong>git branch</strong>,显示远程分支 <strong>git branch -r</strong>,显示本地和远程分支 <strong>git branch -a</strong></li>
<li>获取远程分支 <strong>git pull origin &lt; branch_name &gt;</strong> 或者 <strong>git pull</strong></li>
<li>推送到远程分支，<strong>git push origin &lt; local_branch_name &gt;:&lt; remote_branch_name &gt;</strong>,若本地分支和远程分支tracked，可简写为 <strong>git push</strong>,若 <strong>&lt; local_branch_name &gt;</strong> 为空，则删除远程分支</li>
<li>获取远程新分支 <strong>git checkout -b &lt; local-branchname &gt; origin/ &lt; remote_branchname&gt;</strong></li>
<li>删除本地分支 <strong>git branch -d &lt; branch_name &gt;</strong>,删除远程分支 <strong>git branch -d -r orign/&lt; branch_name &gt;</strong></li>
<li>合并分支 <strong>git merge &lt; branch_name &gt;</strong></li>
<li>建立当前本地分支dev和远程dev分支track <strong>git branch -u origin/dev</strong>，新建和远程dev分支tracked的本地分支 <strong>git branch –track dev origin/dev</strong></li>
<li>查看本地分支和远程分支是否tracked <strong>git branch -vv</strong></li>
<li>分支重命名 <strong>git branch -m oldbranch newbranch</strong></li>
</ol>
<h2 id="git撤销"><a href="#git撤销" class="headerlink" title="git撤销"></a>git撤销</h2><ol>
<li>撤销add <strong>git checkout – filefullname</strong></li>
<li>撤销commit <strong>git reset HEAD filefullname</strong><blockquote>
<ul>
<li><strong>git reset –mixed</strong>：此为默认方式，不带任何参数的git reset，即时这种方式，它回退到某个版本，只保留源码，回退commit和index信息</li>
<li><strong>git reset –soft</strong>：回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可</li>
<li><strong>git reset –hard</strong>：彻底回退到某个版本，本地的源码也会变为上一个版本的内容</li>
</ul>
</blockquote>
</li>
</ol>
<h2 id="git区图解"><a href="#git区图解" class="headerlink" title="git区图解"></a>git区图解</h2><p>  <img src="/images/markdown-img-paste-20170413161611558.png" alt=""></p>
<h2 id="git其他命令"><a href="#git其他命令" class="headerlink" title="git其他命令"></a>git其他命令</h2><ol>
<li>创建裸库： <strong>git init --bare NjqWeb.git</strong></li>
<li>查看本地设置 <strong>git config –list</strong></li>
<li>work和index的比较 <strong>git diff</strong>，index和repository比较 <strong>git diff –staged</strong>，work和repository比较 <strong>git diff HEAD</strong></li>
<li>git status中文被转义 <strong>git config –global core.quotePATH false</strong></li>
<li>master分支仅发布不干活，dev分支仅干活不发布</li>
</ol>
<h2 id="git多远程仓库"><a href="#git多远程仓库" class="headerlink" title="git多远程仓库"></a>git多远程仓库</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[core]</span><br><span class="line">	repositoryformatversion = 0</span><br><span class="line">	filemode = false</span><br><span class="line">	bare = false</span><br><span class="line">	logallrefupdates = true</span><br><span class="line">	symlinks = false</span><br><span class="line">	ignorecase = true</span><br><span class="line">[remote "origin"]</span><br><span class="line">	url = git@l.zjchey.com:haies.github.io</span><br><span class="line">	url = git@git.oschina.net:haies/blog.git</span><br><span class="line">	url = git@git.coding.net:haies/blog.git</span><br><span class="line">	url = git@code.aliyun.com:haies/blog.git</span><br><span class="line">	fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch "master"]</span><br><span class="line">	remote = origin</span><br><span class="line">	merge = refs/heads/master</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>vueJs</tag>
      </tags>
  </entry>
  <entry>
    <title>Gulp</title>
    <url>/gulp/</url>
    <content><![CDATA[<h4 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h4><blockquote>
<p><strong>npm install gulp-autoprefixer gulp-minify-css gulp-jshint gulp-concat gulp-uglify gulp-imagemin gulp-notify gulp-rename gulp-connect gulp-cache del –save-dev</strong></p>
</blockquote>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ol>
<li><strong>gulp.task(name[, deps], fn) 定义任务  name</strong>：任务名称 deps：依赖任务名称 fn：回调函数</li>
<li><strong>gulp.run(tasks…)</strong>：尽可能多的并行运行多个task</li>
<li><strong>gulp.watch(glob, fn)</strong>：当glob内容发生改变时，执行fn</li>
<li><strong>gulp.src(glob)</strong>：置需要处理的文件的路径，可以是多个文件以数组的形式，也可以是正则</li>
<li><strong>gulp.dest(path[, options])</strong>：设置生成文件的路径</li>
</ol>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Java最开始的</title>
    <url>/java-begin/</url>
    <content><![CDATA[<h2 id="JDK、JRE与JVM的区别"><a href="#JDK、JRE与JVM的区别" class="headerlink" title="JDK、JRE与JVM的区别"></a>JDK、JRE与JVM的区别</h2><p><code>JDK</code>是开发的环境依赖，<code>JRE</code>是程序运行环境依赖，<code>JVM</code>（Java虚拟机）是开发调试运行和程序运行的依赖，三者是套娃结构，JDK包含JRE，JRE包含JVM。</p>
<ul>
<li><code>JRE</code>（Java Runtime Environment），提供了一个60M基础类库<code>lib/rt.jar</code>，该库包括常用到的String、集合、网络、多线程等常用类。JRE还提供了不同平台下的JVM。生产环境下的Java程序的运行只需要编译后的字节码+JRE即可。</li>
<li><code>JDK</code>（Java Development Kit），比JRE多了一些位于<code>lib</code>文件夹下的开发类库，如<code>dt.jar</code>、<code>tools.jar</code>，JDK同时也提供了位于<code>bin</code>文件夹下的开发工具，如<code>java.exe</code>、<code>javac.exe</code>和<code>jvisualvm.exe</code>。</li>
<li><code>JVM</code>（Java Virtual Machine），是一个虚拟的计算机，不同平台有不同的实现方式，比如，Windows平台下是<code>bin/server/jvm.dll</code>，Linux系统下是<code>lib/amd64/server/libjvm.so</code>。</li>
</ul>
<h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p>Java虚拟机是实现Java程序跨平台运行的一个抽象层，JVM中的Java解释器负责将字节码文件解释成为特定的机器码进行运行，是实现一次编译处处运行的关键。<code>JVM内存区域</code>分为：类装载器子系统（Class Loader Subsystem）、运行时数据区（ Runtime Data Areas）、和执行引擎（Execution Engine）。JVM内存区域如下：<br><img src="/images/jvm.png" alt="JVM内存结构"></p>
<ul>
<li>类加载器子系统，负责加载程序中的类型（类和接口），并赋予唯一的名字。JVM的两种类装载器包括：启动类装载器和用户自定义类装载器，启动类装载器是JVM实现的，自定义类装载器是Java程序中ClassLoader的子类。</li>
<li>执行引擎，负责执行被加载类中包含的指令，它的执行技术有：解释、即时编译、自适应优化和芯片级直接执行。其中，解释属于第一代JVM，即时编译JIT属于第二代JVM，自适应优化是前两者的结合 ，芯片级直接执行用本地方法执行Java字节码。</li>
</ul>
<blockquote>
<p>自适应优化：开始对所有的代码都采取解释执行的方式，并监视代码执行情况，然后对那些经常调用的方法启动一个后台线程，将其编译为本地代码，并进行仔细优化。若方法不再频繁使用，则取消编译过的代码，仍对其进行解释执行，Sun的HotspotJVM采用这种技术。<br>Java与C编译的区别是：Java是运行时链接，而C是编译时链接。</p>
</blockquote>
<h2 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h2><p>Java程序运行起来后，JVM就是个进程，其运行时数据区是给线程住的内存房子，房子分程序计数器（Program Counter (PC) Register）、虚拟机栈（Java Virtual Machine Stacks）、本地方法栈（Native Method Stacks）、堆（Heap）、方法区（Method Area）、运行时常量池（Run-Time Constant Pool）6个房间，前三个房间是JVM线程私有内存区，后三个是JVM线程共享内存区。方法区包括：变量、静态变量、 类信息(构造方法/接口定义) 和运行时常量池。其他堆内存包括：实例变量和数组。每个线程包含一个栈区，栈中只保存基础数据类型对象和自定义对象的引用(不是对象)。方法区是逻辑独立于堆，但实际包含在堆中，房间结构如下：<br><img src="/images/JVMArchitecture.png" alt="JVM运行时数据区结构"></p>
<blockquote>
<p>Java7之前，方法区位于永久代(PermGen)，永久代和堆相互隔离，永久代的大小在启动JVM时可以设置一个固定值，不可变；Java7中，字符串常量池从永久代移到堆中； Java8中，取消永久代，方法区存放于元空间(Metaspace)，元空间仍然与堆不相连。</p>
</blockquote>
<h2 id="Java-堆内存"><a href="#Java-堆内存" class="headerlink" title="Java 堆内存"></a>Java 堆内存</h2><p>堆房间是给对象住的，堆房间又被分为新生代和老年代两个小房间，新生代小房间又被隔成1个eden隔间和2个survivor隔间，堆房间总大小和各个隔间的比例是JVM调优的关键。JVM进程给Java对象所在的线程提供了运行空间。堆内存结构如下：<br><img src="/images/java-memory-management.jpg" alt="JVM堆内存"></p>
<hr>
<p>参考文献：</p>
<ol>
<li><p><a href="https://cloud.tencent.com/developer/article/1177376" target="_blank" rel="noopener">什么是JVM？</a> </p>
</li>
<li><p><a href="https://www.cnblogs.com/my376908915/p/6753276.html" target="_blank" rel="noopener">字节码执行引擎</a></p>
</li>
<li><p><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html" target="_blank" rel="noopener">The Structure of the Java Virtual Machine</a></p>
</li>
<li><p><a href="https://droidyue.com/blog/2014/12/21/java-runtime-data-areas/" target="_blank" rel="noopener">JVM运行时的数据区</a></p>
</li>
<li><p><a href="https://betsol.com/java-memory-management-for-java-virtual-machine-jvm/" target="_blank" rel="noopener">java-memory-management-for-java-virtual-machine-jvm</a></p>
</li>
<li><p><a href="https://java2blog.com/java-virtual-machine-architecture/" target="_blank" rel="noopener">Java virtual Machine(JVM) and its architecture</a></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java</title>
    <url>/java/</url>
    <content><![CDATA[<h3 id="获取文件夹指定类型的文件"><a href="#获取文件夹指定类型的文件" class="headerlink" title="获取文件夹指定类型的文件"></a>获取文件夹指定类型的文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> File[] getFilterFiles(String path, String[] suffix) &#123;</span><br><span class="line"></span><br><span class="line">    File baseFolder = <span class="keyword">new</span> File(path);</span><br><span class="line">    <span class="keyword">if</span>(!baseFolder.isDirectory())<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    FileFilter imageFilter = pathname -&gt; &#123;</span><br><span class="line">        String fileName = pathname.getName().toLowerCase();</span><br><span class="line">        <span class="keyword">for</span> (String s : suffix) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fileName.endsWith(s.toLowerCase())) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> baseFolder.listFiles(imageFilter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二维表转树Json"><a href="#二维表转树Json" class="headerlink" title="二维表转树Json"></a>二维表转树Json</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">itemType</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">itemTypeTree</span> <span class="title">extetends</span> <span class="title">itemType</span></span>&#123;</span><br><span class="line">    List&lt;itemTypeTree&gt; children;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;ItemTypeTree&gt; <span class="title">recursionNode</span><span class="params">(List&lt;ItemType&gt; list, ItemType itemTree)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(list==<span class="keyword">null</span>)<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(itemTree==<span class="keyword">null</span>)itemTree=<span class="keyword">new</span> ItemTypeTree();</span><br><span class="line">    <span class="keyword">return</span>  getChildNode(list,itemTree).stream()</span><br><span class="line">            .map(item -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(getChildNode(list,item).size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    item.setChildren(recursionNode(list,item));</span><br><span class="line">                &#125;</span><br><span class="line">               <span class="keyword">return</span>  item;</span><br><span class="line">            &#125;)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;ItemTypeTree&gt; <span class="title">getChildNode</span><span class="params">(List&lt;ItemType&gt; list,ItemType itemTree)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> list.stream()</span><br><span class="line">            .filter(item -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(StringUtils.isBlank(itemTree.getTypecode()))&#123;</span><br><span class="line">                    <span class="keyword">return</span> StringUtils.isBlank(item.getParentcode());</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> item.getParentcode().equals(itemTree.getTypecode());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .map(itemType -&gt; &#123;</span><br><span class="line">                ItemTypeTree itemTypeTree=<span class="keyword">new</span> ItemTypeTree();</span><br><span class="line">                BeanUtils.copyProperties(itemType,itemTypeTree);</span><br><span class="line">                <span class="keyword">return</span> itemTypeTree;</span><br><span class="line">            &#125;)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Jquery</title>
    <url>/jquery/</url>
    <content><![CDATA[<h3 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.isBlank = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123; <span class="keyword">return</span>(!obj || $.trim(obj) ===<span class="string">""</span> ); &#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>ITIS</title>
    <url>/itis/</url>
    <content><![CDATA[<h1 id="准备材料清单"><a href="#准备材料清单" class="headerlink" title="准备材料清单"></a>准备材料清单</h1><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><ul>
<li>ZCEY ITISPR-33_服务级别管理程序-服务目录.xls</li>
<li>ZCEY ITISPR-33_服务级别管理程序-IT服务水平协议(SLA).docx</li>
<li>ZCEY ITISPR-33_服务级别管理程序-运营级别协议OLAS.doc</li>
</ul>
<h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><ul>
<li>系统开发合同/开发任务单</li>
<li>系统需求分析</li>
<li>系统功能设计</li>
<li>系统测试方案</li>
<li>系统测试报告</li>
<li>系统验收报告或功能点验收报告</li>
<li>用户报告</li>
</ul>
<h2 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h2><ul>
<li>ZCEY ITISPR-22_事件管理程序-运维事件汇总记录单.xlsx</li>
<li>ZCEY ITISPR-22_事件管理程序-重大事件处理报告单.docx</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>系统变更记录</li>
<li>系统会议记录</li>
<li>系统巡检记录</li>
<li>其他ITIS文件</li>
</ul>
<h1 id="安全服务协议"><a href="#安全服务协议" class="headerlink" title="安全服务协议"></a>安全服务协议</h1><ul>
<li>服务目录<br>服务目录需根据不同的系统进行定制。</li>
<li>服务协议</li>
<li>运营协议</li>
<li>服务提供方式<br>如果提供技术支持，提供系统支持过程记录单。</li>
<li>服务评价<br>用户报告、用户满意度调查</li>
</ul>
<h1 id="开发过程控制"><a href="#开发过程控制" class="headerlink" title="开发过程控制"></a>开发过程控制</h1><ul>
<li>系统合同或开发任务书<br>系类型为：为甲方开发的任务、为院生产开发的任务、出售软件服务。为甲方开发的任务需要提供系统开发合同，后两者需提供开发任务书。</li>
<li>需求分析<br>分功能性需求和非功能性需求。</li>
<li>功能设计<br>功能设计需以需求为核心，一般包括概要设计和详细设计。</li>
<li>系统测试<br>包括系统测试方案，测试报告。</li>
<li>系统验收<br>系统验收报告或功能点验收报告。</li>
<li>系统发布<br>系统发布方案</li>
<li>系统运维<br>提供系统运维记录。</li>
</ul>
<h1 id="信息安全保证"><a href="#信息安全保证" class="headerlink" title="信息安全保证"></a>信息安全保证</h1><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul>
<li>开发环境分内网环境和外网环境，如果开发过程涉及到涉密数据，开发的调试和测试需放在内网环境。</li>
<li>主机登录需考虑密钥和IP限制。</li>
<li>主机需进行端口访问和IP访问策略控制，采用阿里云管理访问策略。</li>
<li>开发主机需要安装杀毒软件或购买相应的云安全服务，如安骑士等。</li>
</ul>
<h2 id="代码管理"><a href="#代码管理" class="headerlink" title="代码管理"></a>代码管理</h2><ul>
<li>使用svn 和git进行版本控制，版本控制分成果和开发分支。</li>
<li>开发人员需提交密钥后才能提交代码，且只能提交到开发分支。</li>
<li>项目负责人需管理分支，进行code review后将新开发的功能或者改进的代码合并到成果分支。</li>
</ul>
<h2 id="系统安全"><a href="#系统安全" class="headerlink" title="系统安全"></a>系统安全</h2><ul>
<li>系统使用需进行登录，和无操作登录超时操作，用户密码需要进行加密和弱密码限制策略。</li>
<li>系统关键参数，如坐标转换参数需进行加密，且满足一定的加密强度。</li>
</ul>
<h2 id="数据安全"><a href="#数据安全" class="headerlink" title="数据安全"></a>数据安全</h2><ul>
<li>系统和系统数据库进行定时和手动备份计划。</li>
<li>系统代码和文档需在不同主机进行备份。</li>
<li>系统进行关键数据操作时，提供回退操作，且能回退到操作前的数据状态。</li>
</ul>
]]></content>
      <tags>
        <tag>summary</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/linux/</url>
    <content><![CDATA[<h2 id="查看系统信息"><a href="#查看系统信息" class="headerlink" title="查看系统信息"></a>查看系统信息</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">id -un</span><br><span class="line">uname -a</span><br><span class="line">lsb_release -c</span><br><span class="line">lscpu</span><br><span class="line">lshw</span><br><span class="line">cat /proc/meminfo</span><br></pre></td></tr></table></figure>

<h2 id="初始安装"><a href="#初始安装" class="headerlink" title="初始安装"></a>初始安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh -c "$(curl -fsSL http://www.haies.cn/assets/install-zsh.sh)"</span><br><span class="line">sh -c "$(curl -fsSL http://www.haies.cn/assets/debian-init.sh)"</span><br><span class="line">sh -c "$(curl -fsSL http://www.haies.cn/assets/centos-init.sh)"</span><br><span class="line">sh -c "$(curl -fsSL http://www.haies.cn/assets/ubuntu-init.sh)"</span><br><span class="line">sh -c "$(curl -fsSL http://www.haies.cn/assets/apt-install.sh)"</span><br><span class="line">sh -c "$(curl -fsSL http://www.haies.cn/assets/yum-install-docker.sh)"</span><br><span class="line">sh -c "$(curl -fsSL http://www.haies.cn/assets/dns.sh)"</span><br></pre></td></tr></table></figure>

<h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><p>查看磁盘格式：<code>lsblk -f</code><br>查看磁盘信息：<code>fdisk -l</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkfs.xfs -f /dev/vdb&amp;&amp;</span><br><span class="line">mkdir /hda&amp;&amp;</span><br><span class="line">mount /dev/vdb /hda&amp;&amp;</span><br><span class="line">echo /dev/vdb    /hda    xfs    defaults    0    0 &gt;&gt; /etc/fstab</span><br><span class="line"></span><br><span class="line">mkfs.ext4 -T huge -b 4096  /dev/vdb&amp;&amp;</span><br><span class="line">mkdir /hda&amp;&amp;</span><br><span class="line">mount /dev/vdb /hda&amp;&amp;</span><br><span class="line">echo /dev/vdb    /hda    ext4    defaults    0    0 &gt;&gt; /etc/fstab</span><br><span class="line"></span><br><span class="line">mkfs.ext3 -T largefile -i 4096  /dev/xvdb1&amp;&amp;</span><br><span class="line">mkdir /hda&amp;&amp;</span><br><span class="line">mount /dev/xvdb1 /hda&amp;&amp;</span><br><span class="line">echo /dev/xvdb1    /hda    ext3    defaults    0    0 &gt;&gt; /etc/fstab</span><br></pre></td></tr></table></figure>

<h2 id="NTFS读写"><a href="#NTFS读写" class="headerlink" title="NTFS读写"></a>NTFS读写</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install ntfs-3g</span><br><span class="line">mount -t ntfs-3g /dev/hdax /mnt/windows</span><br><span class="line">/dev/hdax /mnt/windows ntfs-3g defaults 0 0</span><br></pre></td></tr></table></figure>

<h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><p>迁移目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkfs.xfs -f /dev/xvdb2&amp;&amp;</span><br><span class="line">mkdir /vartemp&amp;&amp;</span><br><span class="line">mount /dev/xvdb2 /vartemp&amp;&amp;</span><br><span class="line">rsync -avx /var  /vartemp&amp;&amp;</span><br><span class="line">mv /var /var.old&amp;&amp;</span><br><span class="line">mkdir /var&amp;&amp;</span><br><span class="line">umount -lf /dev/xvdb2 /vartemp&amp;&amp;</span><br><span class="line">mount /dev/xvdb2 /var</span><br></pre></td></tr></table></figure>

<p>目录备份还原：<code>dump</code>和<code>restore</code><br>目录占用查看：<code>fuser</code>和<code>lsof</code><br>合并文件夹：<code>cp -rlfv parta/* partb/* part</code>  </p>
<h2 id="配置主机"><a href="#配置主机" class="headerlink" title="配置主机"></a>配置主机</h2><p>在~/.ssh/config中增加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Include ~/.ssh/config.d/*</span><br><span class="line">Host aws</span><br><span class="line">        Hostname 10.2.*.*</span><br><span class="line">        Port 22</span><br><span class="line">        User ubuntu</span><br><span class="line">        IdentityFile ~/.ssh/aws.pem</span><br></pre></td></tr></table></figure>

<h2 id="添加自启动服务"><a href="#添加自启动服务" class="headerlink" title="添加自启动服务"></a>添加自启动服务</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">update-rc.d apache2 defaults</span><br></pre></td></tr></table></figure>

<h2 id="远程执行命令"><a href="#远程执行命令" class="headerlink" title="远程执行命令"></a>远程执行命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh root@59.202.*.* "cd /home/git/.ssh&amp;&amp;cat id_rsq.pub&gt;&gt;authorized_keys"</span><br></pre></td></tr></table></figure>

<h2 id="7Z"><a href="#7Z" class="headerlink" title="7Z"></a>7Z</h2>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">7z e archive.zip -o/soft *.cpp</span><br><span class="line">tar -zcvpf /tmp/etc.tar.gz /etc</span><br><span class="line">tar -zxvf ./text.tar.gz -C /home/app/test/</span><br><span class="line">ls -l |grep ^d|awk &#123;'print $9'&#125;|xargs -t -i 7z a &#123;&#125;.7z &#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="挂载DVD源"><a href="#挂载DVD源" class="headerlink" title="挂载DVD源"></a>挂载DVD源</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /iso&amp;&amp;</span><br><span class="line">mount -t iso9660 -o loop /hda/debian7.8/debian-7.8.0-amd64-DVD-1.iso /iso&amp;&amp;</span><br><span class="line">echo deb file:///iso/ wheezy main contrib&gt;/etc/apt/sources.list&amp;&amp;</span><br><span class="line">sudo apt-get update&amp;&amp;</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ls</title>
    <url>/ls/</url>
    <content><![CDATA[<h2 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h2><ul>
<li><code>Ctrl+F12</code>或<code>Alt+7</code> 文件结构</li>
<li><code>Ctrl+Shift+E</code> 最近更改的文件</li>
<li><code>Ctrl+Alt+B</code> 跳转到方法实现处</li>
<li><code>Ctrl+”=/-”</code> 当前方法展开、折叠</li>
<li><code>Ctrl+Shift+”=/-”</code> 全部展开、折叠</li>
<li><code>Shift+F8</code> 步出</li>
<li><code>Alt+F9</code> 运行至光标处</li>
<li><code>Alt+2</code> 收藏</li>
</ul>
<h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><ul>
<li>查看一级目录大小：<code>du -hd 1</code></li>
</ul>
<h2 id="tumx"><a href="#tumx" class="headerlink" title="tumx"></a>tumx</h2><ul>
<li><code>ta</code> 打开一个窗口</li>
<li><code>ts</code> 创建一个窗口</li>
<li><code>tl</code> 列出窗口</li>
<li><code>tkss</code> 杀死一个窗口</li>
<li><code>tks</code> 杀死全部</li>
</ul>
<h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><ul>
<li><code>/search_string\c</code> 向下查找</li>
<li><code>?</code> 向上查找</li>
<li><code>:%s/foo/bar/gic</code> 全局范围<code>%</code>查找foo并替换为bar，全局替换<code>g</code>,大小写敏感<code>i</code>，确认 <code>c</code>。</li>
</ul>
<h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><ul>
<li><code>nginx -V</code> 查看详细信息（模块）</li>
</ul>
<h2 id="psql"><a href="#psql" class="headerlink" title="psql"></a>psql</h2><ul>
<li><code>sudo -u psql</code> 进入psql</li>
<li><code>\l</code> 列出数据库</li>
<li><code>\dt</code> 列出表</li>
<li><code>\d [tablename]</code> 列出表字段</li>
</ul>
<h2 id="regex"><a href="#regex" class="headerlink" title="regex"></a>regex</h2><ul>
<li>部分替换</li>
</ul>
<blockquote>
<p>原始字符串：我是程序员<br>正则：<code>(.*)(([^不是]|[^是]|)程序员)(.*)</code><br>替换为：$1工程师$4</p>
</blockquote>
<ul>
<li>非捕捉组</li>
</ul>
<blockquote>
<p><code>Windows(?=95|98|NT|2000)</code><br>匹配 “Windows2000” 中的 “Windows”<br>不匹配 “Windows3.1” 中的 “Windows”</p>
</blockquote>
<p>  模式必须放后面<code>(?=Windows)95</code>无法匹配Windows95。<br>  有回查类型的，例如：</p>
<blockquote>
<p><code>2000(?&lt;=Office|Word|Excel)</code><br>匹配 “ Office2000” 中的 “2000”<br>不匹配 “Windows2000” 中的 “2000”</p>
</blockquote>
<p>  但是回查类型的在Atom和Sublime Text3均无效。</p>
<h2 id="记不住的"><a href="#记不住的" class="headerlink" title="记不住的"></a>记不住的</h2><ul>
<li>开启SVN svnserve -d -r /mnt/d/svncode/project</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>批量重命名 <code>for i in</code>find -name ‘yale_*’<code>;do mv $i ${i/yale/qsh};done</code></li>
<li>批量替换文本内容 <code>sed -i &quot;s/yale/qsh/g&quot; `grep yale -lr .`</code></li>
</ul>
]]></content>
      <tags>
        <tag>summary</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis</title>
    <url>/mybatis/</url>
    <content><![CDATA[<h3 id="insert返回主键"><a href="#insert返回主键" class="headerlink" title="insert返回主键"></a>insert返回主键</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertSelective"</span> <span class="attr">parameterType</span>=<span class="string">"com.web.quickwork.entity.UserProject"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertSelective"</span> <span class="attr">parameterType</span>=<span class="string">"com.zjchey.xxfy.geoCity.entity.Report"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"uid"</span> <span class="attr">order</span>=<span class="string">"BEFORE"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Object"</span>&gt;</span></span><br><span class="line">    SELECT uuid_generate_v4()</span><br><span class="line">  <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertSelective"</span> <span class="attr">parameterType</span>=<span class="string">"com.web.quickwork.entity.UserProject"</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">resultType</span>=<span class="string">"long"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">    SELECT MAX (ID) FROM USERPROJECT</span><br><span class="line">  <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Postgres</title>
    <url>/postgres/</url>
    <content><![CDATA[<h4 id="数据库备份"><a href="#数据库备份" class="headerlink" title="数据库备份"></a>数据库备份</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alias pgbackup&#x3D;&#39;thisFun()&#123;pg_dump -U postgres -F t -ovf &#x2F;var&#x2F;pgbak&#x2F;$1_$(date &#39;+%Y%m%d%H%M%S&#39;).tar $1&#125;;thisFun&#39;</span><br><span class="line">alias pgbak&#x3D;&#39;pg_dump -h localhost -U postgres -F t -ovf &#x2F;var&#x2F;pgbak&#x2F;njqdb.tar njqdb&#39;</span><br><span class="line">pg_dump -h localhost -U postgres -d njqwebdb &gt; &#x2F;hdc&#x2F;njqdbbak&#x2F;njqweb$(date &#39;+%Y%m%d%H%M%S&#39;).bak -v</span><br></pre></td></tr></table></figure>
<h4 id="数据库恢复"><a href="#数据库恢复" class="headerlink" title="数据库恢复"></a>数据库恢复</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alias pgrecover&#x3D;&#39;thisFun()&#123;var&#x3D;$&#123;1%%_*&#125;;var&#x3D;$&#123;var##*&#x2F;&#125;;echo $var;pg_restore -U postgres -d $&#123;var&#125; -cv $1&#125;;thisFun&#39;</span><br><span class="line">alias pgrec&#x3D;&#39;pg_restore -h localhost -U postgres -d njqdb -cv &#x2F;var&#x2F;pgbak&#x2F;njqdb.tar</span><br><span class="line">psql -h localhost -U postgres -d databasename &lt;  C:\databasename.bak</span><br></pre></td></tr></table></figure>
<h4 id="Linux管理"><a href="#Linux管理" class="headerlink" title="Linux管理"></a>Linux管理</h4><ul>
<li>登录数据库 <code>sudo psql -u postgres</code></li>
<li>导出到表格<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">COPY (SELECT a.corp_name,a.area_code,a.entity_code,b.addr_type,b.addr_content,b.symbol_code,b.geo_addr FROM geo_entity_info as a left join geo_space_info as b on a.corp_id&#x3D;b.corp_id) TO &#39;&#x2F;mnt&#x2F;d&#x2F;a.csv&#39; WITH csv HEADER;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="开启模块扩展"><a href="#开启模块扩展" class="headerlink" title="开启模块扩展"></a>开启模块扩展</h4><ul>
<li>创建数据库<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database geoTemplate;</span><br><span class="line">\c geoTemplate;</span><br></pre></td></tr></table></figure></li>
<li>启用空间数据库模块<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE EXTENSION postgis;</span><br><span class="line">CREATE EXTENSION pgrouting;</span><br><span class="line">CREATE EXTENSION postgis_topology;</span><br><span class="line">CREATE EXTENSION fuzzystrmatch;</span><br><span class="line">CREATE EXTENSION postgis_tiger_geocoder;</span><br><span class="line">CREATE EXTENSION address_standardizer;</span><br><span class="line">CREATE EXTENSION &quot;uuid-ossp&quot;;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="创建空间索引"><a href="#创建空间索引" class="headerlink" title="创建空间索引"></a>创建空间索引</h4><ul>
<li>CREATE INDEX name ON table USING gist(column);</li>
<li>CREATE INDEX name ON table USING gin(column);</li>
</ul>
<h4 id="查询所有数据库大小"><a href="#查询所有数据库大小" class="headerlink" title="查询所有数据库大小"></a>查询所有数据库大小</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> pg_database.datname, pg_size_pretty(pg_database_size(pg_database.datname)) <span class="keyword">AS</span> <span class="keyword">size</span> <span class="keyword">from</span> pg_database <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">size</span> <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>
<h4 id="查看全部表大小"><a href="#查看全部表大小" class="headerlink" title="查看全部表大小"></a>查看全部表大小</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> relname, pg_size_pretty(pg_relation_size(relid)) <span class="keyword">from</span> pg_stat_user_tables <span class="keyword">where</span> schemaname=<span class="string">'public'</span> <span class="keyword">order</span> <span class="keyword">by</span> pg_relation_size(relid) <span class="keyword">desc</span></span><br></pre></td></tr></table></figure>

<h4 id="查看全部表索引大小"><a href="#查看全部表索引大小" class="headerlink" title="查看全部表索引大小"></a>查看全部表索引大小</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> indexrelname, pg_size_pretty(pg_relation_size(relid)) <span class="keyword">from</span> pg_stat_user_indexes <span class="keyword">where</span> schemaname=<span class="string">'public'</span> <span class="keyword">order</span> <span class="keyword">by</span> pg_relation_size(relid) <span class="keyword">desc</span></span><br></pre></td></tr></table></figure>

<h4 id="查看数据库连接情况"><a href="#查看数据库连接情况" class="headerlink" title="查看数据库连接情况"></a>查看数据库连接情况</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> pg_stat_activity</span><br></pre></td></tr></table></figure>

<h4 id="结束数据库连接"><a href="#结束数据库连接" class="headerlink" title="结束数据库连接"></a>结束数据库连接</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> pg_terminate_backend(pid)  <span class="keyword">FROM</span> pg_stat_activity <span class="keyword">WHERE</span> datname=<span class="string">'njqwebdb'</span> <span class="keyword">AND</span> pid&lt;&gt;pg_backend_pid()</span><br></pre></td></tr></table></figure>

<h4 id="查询数据库中的表"><a href="#查询数据库中的表" class="headerlink" title="查询数据库中的表"></a>查询数据库中的表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> pg_tables <span class="keyword">WHERE</span> schemaname=<span class="string">'public'</span></span><br></pre></td></tr></table></figure>

<h4 id="语句耗时统计"><a href="#语句耗时统计" class="headerlink" title="语句耗时统计"></a>语句耗时统计</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">FROM</span> pg_stat_statements <span class="keyword">ORDER</span> <span class="keyword">BY</span> total_time <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>

<h4 id="索引缓存命中率"><a href="#索引缓存命中率" class="headerlink" title="索引缓存命中率"></a>索引缓存命中率</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">sum</span>(idx_blks_read) <span class="keyword">as</span> idx_read,</span><br><span class="line">  <span class="keyword">sum</span>(idx_blks_hit)  <span class="keyword">as</span> idx_hit,</span><br><span class="line">  (<span class="keyword">sum</span>(idx_blks_hit) - <span class="keyword">sum</span>(idx_blks_read)) / <span class="keyword">sum</span>(idx_blks_hit) <span class="keyword">as</span> ratio</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  pg_statio_user_indexes;</span><br></pre></td></tr></table></figure>
<h4 id="查看数据库物理大小"><a href="#查看数据库物理大小" class="headerlink" title="查看数据库物理大小"></a>查看数据库物理大小</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> pg_size_pretty(pg_database_size(<span class="string">'postgres'</span>));</span><br></pre></td></tr></table></figure>

<h4 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a>导入数据库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shp2pgsql -a -D -s 4326 -W utf-8 point.shp geo_point &gt; result.sql</span><br></pre></td></tr></table></figure>

<blockquote>
<p>-s 代表指定数据的SRID为3857<br>-c 代表数据将新建一个表<br>-d 删除旧的表，重新建表并插入数据<br>-a 向现有表中追加数据<br>-p 仅创建表结构，不添加数据，这四个参数是互斥的<br>-W Shape文件中属性的字符集，通常Postgresql的字符集是UTF-8，有时候可能Shape数据中的字符集是其他，就可能报“Unable to convert data value to UTF-8 (iconv reports “无效或不完整的多字节字符或宽字符”). Current encoding is “UTF-8”. Try “LATIN1” (Western European)”错误，这时候指定正确的字符集即可解决方问题。</p>
</blockquote>
<h4 id="清空带外键约束的表格"><a href="#清空带外键约束的表格" class="headerlink" title="清空带外键约束的表格"></a>清空带外键约束的表格</h4><p><code>TRUNCATE njq_user_basic CASCADE</code><br> <img src="/images/markdown-img-paste-20170809121823946.png" alt=""></p>
<h4 id="导入函数创建脚本"><a href="#导入函数创建脚本" class="headerlink" title="导入函数创建脚本"></a>导入函数创建脚本</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> proname,  pg_get_functiondef(proname::regproc) <span class="keyword">from</span> pg_proc <span class="keyword">where</span> proname <span class="keyword">LIKE</span> <span class="string">'njq_%'</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>postgres</tag>
      </tags>
  </entry>
  <entry>
    <title>Postgresql</title>
    <url>/postgresql/</url>
    <content><![CDATA[<h2 id="跨表查询统计"><a href="#跨表查询统计" class="headerlink" title="跨表查询统计"></a>跨表查询统计</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> xcz_item.code,xcz_region.<span class="string">"name"</span>,<span class="string">"type"</span>,<span class="string">"count"</span>(xcz_item.code) <span class="keyword">AS</span> <span class="keyword">count</span></span><br><span class="line"><span class="keyword">FROM</span> xcz_item</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> xcz_region</span><br><span class="line"><span class="keyword">ON</span> xcz_item.code <span class="keyword">LIKE</span> <span class="string">'330604%'</span> <span class="keyword">AND</span> xcz_item.code=xcz_region.code</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> xcz_item.code,<span class="string">"type"</span>,xcz_region.<span class="string">"name"</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> xcz_item.code ,<span class="string">"type"</span></span><br></pre></td></tr></table></figure>
<h2 id="跨表条件统计"><a href="#跨表条件统计" class="headerlink" title="跨表条件统计"></a>跨表条件统计</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> a.code,a.name,</span><br><span class="line"><span class="keyword">COALESCE</span>(<span class="keyword">count</span>(b.*),<span class="number">0</span>) <span class="keyword">AS</span> total,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> b.state = <span class="number">4</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> finished,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> b.state &lt;&gt;<span class="number">4</span> <span class="keyword">OR</span> b.state <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> unfinished,</span><br><span class="line">st_astext(st_centroid(a.geom)) <span class="keyword">AS</span> <span class="keyword">position</span></span><br><span class="line"><span class="keyword">FROM</span> xcz_region a <span class="keyword">left</span> <span class="keyword">join</span> xcz_item b</span><br><span class="line"><span class="keyword">ON</span> a.code=b.code</span><br><span class="line"><span class="keyword">WHERE</span> a.need=<span class="number">1</span> <span class="keyword">AND</span> b.type=<span class="string">'1001'</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> a.code,a.name,a.geom</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> a.code</span><br></pre></td></tr></table></figure>
<h2 id="图形操作"><a href="#图形操作" class="headerlink" title="图形操作"></a>图形操作</h2><ul>
<li>空间查询<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(*) <span class="keyword">FROM</span> njq_dk <span class="keyword">WHERE</span> st_intersects(geom,st_geomfromtext(<span class="string">'MULTIPOLYGON(((120.92 29.37,120.93 29.37,120.93 29.38,120.92 29.37,120.92 29.37)))'</span>,<span class="number">4326</span>))</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(*) <span class="keyword">FROM</span> njq_dk <span class="keyword">WHERE</span> st_intersects(geom,st_geomfromtext(<span class="string">'POLYGON((120.92 29.37,120.93 29.37,120.93 29.38,120.92 29.37,120.92 29.37))'</span>,<span class="number">4326</span>))</span><br></pre></td></tr></table></figure></li>
<li>创建空间索引<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> extension pg_trgm;</span><br><span class="line"><span class="keyword">update</span> pg_opclass <span class="keyword">set</span> opcdefault = <span class="literal">true</span> <span class="keyword">where</span> opcname=<span class="string">'gin_trgm_ops'</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">index</span> <span class="keyword">on</span> njq_dk <span class="keyword">USING</span> gist (geom);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">index</span> <span class="keyword">on</span> njq_dk <span class="keyword">USING</span> gin (geom gin_trgm_ops);</span><br></pre></td></tr></table></figure></li>
<li>外包多边形<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ST_AsText(ST_ConvexHull(ST_Collect(geom))) <span class="keyword">FROM</span> xcz_region</span><br></pre></td></tr></table></figure></li>
<li>外包矩形<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ST_AsText(st_Envelope(ST_Collect(geom))) <span class="keyword">FROM</span> xcz_region</span><br></pre></td></tr></table></figure></li>
<li>中心点（面质心）<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> st_astext(st_centroid(geom)) <span class="keyword">FROM</span> xcz_region</span><br></pre></td></tr></table></figure></li>
<li>面上点（和面lable位置一致）<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> st_astext(st_PointOnSurface(geom)) <span class="keyword">FROM</span> xcz_region</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>postgres</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim</title>
    <url>/vim/</url>
    <content><![CDATA[<h4 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h4><pre><code>&gt;跳转到第一行：**gg**
跳转到最后一行：**GG**
跳转到第N行：**Ngg**</code></pre><h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><pre><code>&gt;向后搜索：**: /**
向前搜索：**:?**
下一个：**n**
上一个：**N**</code></pre>]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>VueJs Pro</title>
    <url>/vuejs-pro/</url>
    <content><![CDATA[<h3 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h3><p><img src="/images/markdown-img-paste-20170512083657857.png" alt=""></p>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>vueJs</tag>
      </tags>
  </entry>
  <entry>
    <title>VueJs Start</title>
    <url>/vuejs-start/</url>
    <content><![CDATA[<h1 id="vuejs开发说明"><a href="#vuejs开发说明" class="headerlink" title="vuejs开发说明"></a>vuejs开发说明</h1><h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><ol>
<li>安装<a href="https://nodejs.org/dist/v6.10.3/node-v6.10.3-x64.msi" target="_blank" rel="noopener">node.js</a></li>
<li>安装cnpm<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li>
<li>安装vue-cli<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm i vue-cli</span><br></pre></td></tr></table></figure></li>
<li>下载代码并进入代码目录下进行模块安装<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm i</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="IDEA配置"><a href="#IDEA配置" class="headerlink" title="IDEA配置"></a>IDEA配置</h2><ol>
<li>File-&gt;settings-&gt;plugins 安装 <strong>node</strong> 插件和 <strong>vue.js</strong> 插件，重启IDEA</li>
<li>配置启动项如下图:<br><img src="/images/markdown-img-paste-20170503140605879.png" alt=""></li>
</ol>
<h2 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h2><ol>
<li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">ES6</a></li>
<li><a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">vue.js</a></li>
<li><a href="http://router.vuejs.org/zh-cn/" target="_blank" rel="noopener">vue-router</a></li>
<li><a href="https://vuex.vuejs.org/zh-cn/" target="_blank" rel="noopener">vuex</a></li>
<li><a href="http://element.eleme.io/#/zh-CN/component/installation" target="_blank" rel="noopener">element-ui</a></li>
</ol>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>vueJs</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/spring/</url>
    <content><![CDATA[<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><ol>
<li>@DateTimeFormat(pattern=”yyyy-MM-dd”)是将String转换成Date，一般前台给后台传值时用</li>
<li>@JsonFormat(pattern=”yyyy-MM-dd”)  将Date转换成String  一般后台传值给前台时</li>
<li>@JsonDeserialize(using = CustomJsonDateDeserializer.class)</li>
<li>@JsonSerialize(using= DateJsonSerializer.class)<br><img src="/images/markdown-img-paste-20180319132638451.png" alt=""><h2 id="配置属性"><a href="#配置属性" class="headerlink" title="配置属性"></a>配置属性</h2><img src="/images/markdown-img-paste-20180319132657760.png" alt=""></li>
</ol>
]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>win</title>
    <url>/win/</url>
    <content><![CDATA[<h2 id="WinGet"><a href="#WinGet" class="headerlink" title="WinGet"></a><a href="https://github.com/microsoft/winget-cli" target="_blank" rel="noopener">WinGet</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">winget install voidtools.Everything |</span><br><span class="line">winget install NickeManarin.ScreenToGif |</span><br><span class="line">winget install flux.flux |</span><br><span class="line">winget install QL-Win.QuickLook |</span><br><span class="line">winget install VideoLAN.VLC |</span><br><span class="line">winget install TortoiseSVN |</span><br><span class="line">winget install JRSoftware.InnoSetup |</span><br><span class="line">winget install AutoHotkey |</span><br><span class="line">winget install evernote.yinxiang |</span><br><span class="line">winget install Tencent.WeChat |</span><br><span class="line">winget install Tencent.TIM |</span><br><span class="line">winget install Tencent.QQ |</span><br><span class="line">winget install Tencent.Weiyun |</span><br><span class="line">winget install Microsoft.VisualStudioCode-User-x64 |</span><br><span class="line">winget install Microsoft.WindowsTerminal |</span><br><span class="line">winget install Microsoft.VisualStudio.Community |</span><br><span class="line">winget install Microsoft.PowerToys |</span><br><span class="line">winget install OSGeo.QGIS_LTR |</span><br><span class="line">winget install Google.Chrome |</span><br><span class="line">winget install Mozilla.Firefox |</span><br><span class="line">winget install WinSCP |</span><br><span class="line">winget install Debian.Debian |</span><br><span class="line">winget install Canonical.Ubuntu |</span><br><span class="line">winget install lstratman.easyconnect |</span><br><span class="line">winget install JetBrains.IntelliJIDEA.Ultimate |</span><br><span class="line">winget install Foxit.PhantomPDF |</span><br><span class="line">--winget install seafile |</span><br><span class="line">--winget install dingding |</span><br><span class="line">--winget install snipaste |</span><br><span class="line">--winget install xftp/xshell |</span><br><span class="line">--winget install arcgis/fme |</span><br><span class="line">--winget install navicat |</span><br><span class="line">--winget install office |</span><br><span class="line">----winget install 7zip.7zip |</span><br></pre></td></tr></table></figure>

<h2 id="Chocolatey"><a href="#Chocolatey" class="headerlink" title="Chocolatey"></a><a href="https://chocolatey.org/install" target="_blank" rel="noopener">Chocolatey</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy Bypass -Scope Process -Force;iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))</span><br></pre></td></tr></table></figure>

<p><code>choco install vscode everything tim firefox google-chrome-x64 flashplayerplugin flashplayerppapi -y</code></p>
<p><code>choco install tortoisesvn seafile-client autohotkey InnoSetup -y</code></p>
<p><code>choco install chocolatey-package.config</code></p>
<h2 id="Scoop"><a href="#Scoop" class="headerlink" title="Scoop"></a><a href="https://github.com/lukesampson/scoop" target="_blank" rel="noopener">Scoop</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy RemoteSigned -scope CurrentUser -Force;iex (new-object net.webclient).downloadstring('https://get.scoop.sh')</span><br></pre></td></tr></table></figure>

<p><code>scoop install 7zip git-with-openssh gitignore sudo nodejs-lts busybox maven -g</code></p>
<p><code>npm i -g tldr vue-cli webpack-cli</code></p>
<p><code>scoop install cmder yarn python -g</code></p>
<h2 id="微软商店"><a href="#微软商店" class="headerlink" title="微软商店"></a>微软商店</h2><ul>
<li>snipaste</li>
</ul>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>Everything <code>%AppData%\Everything\Everything.ini</code></li>
<li>SSH <code>%HOMEPATH%\.ssh</code></li>
<li>Git <code>%HOMEPATH%\.gitconfig</code></li>
</ul>
<h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>  <code>npm install phantomjs-prebuilt</code></p>
<p>  <code>npm install tldr -g</code></p>
<h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h2><h2 id="apm"><a href="#apm" class="headerlink" title="apm"></a>apm</h2><p>  <code>apm i sync-settings file-icons git-plus atom-beautify platformio-ide-terminal atom-hexo language-markdown markdown-img-paste markdown-pdf markdown-scroll-sync markdown-toc sublime-style-column-selection</code></p>
<p>  <code>apm list --installed --bare &gt; hai-atom-packages.txt</code><br>  <code>apm install --packages-file hai-atom-packages.txt</code></p>
<h2 id="bower"><a href="#bower" class="headerlink" title="bower"></a>bower</h2><h2 id="Nuget"><a href="#Nuget" class="headerlink" title="Nuget"></a>Nuget</h2>]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>mac</title>
    <url>/mac/</url>
    <content><![CDATA[<h2 id="hombrew"><a href="#hombrew" class="headerlink" title="hombrew"></a>hombrew</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c <span class="string">"<span class="variable">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>"</span></span><br><span class="line"></span><br><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL http://www.haies.cn/assets/install-zsh.sh)</span>"</span></span><br><span class="line"></span><br><span class="line">brew install wechat tim qq dingtalk p7zip ffmpeg</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
